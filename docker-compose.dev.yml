version: '3.8'

# Development-specific configuration
services:
  # API Gateway (Development)
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    volumes:
      - ./backend/api-gateway:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4000
      - AUTH_SERVICE_URL=http://auth-service:4001/graphql
      - PROPERTY_SERVICE_URL=http://property-service:4002/graphql
      - TENANT_SERVICE_URL=http://tenant-service:4003/graphql
      - MAINTENANCE_SERVICE_URL=http://maintenance-service:4004/graphql
      - BOOKING_SERVICE_URL=http://booking-service:4005/graphql
      - PAYMENT_SERVICE_URL=http://payment-service:4006/graphql
      - NOTIFICATION_SERVICE_URL=http://notification-service:4007/graphql
      - CORS_ORIGIN=http://localhost:3000
      - JWT_SECRET=dev-secret-key
      - LOG_LEVEL=info
    depends_on:
      - auth-service
      - property-service
      - tenant-service
      - maintenance-service
      - booking-service
      - payment-service
      - notification-service
    networks:
      - propflow-network

  # Auth Service (Development)
  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    ports:
      - "4001:4001"
    volumes:
      - ./backend/auth-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4001
      - DATABASE_URL=postgresql://propflow:propflow123@postgres:5432/propflow_auth
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-secret-key
      - EMAIL_FROM=noreply@propflow.com
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
    depends_on:
      - postgres
      - redis
    networks:
      - propflow-network

  # Property Service (Development)
  property-service:
    build:
      context: ./backend/property-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend/property-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DEBUG=true

  # Tenant Service (Development)
  tenant-service:
    build:
      context: ./backend/tenant-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend/tenant-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DEBUG=true

  # Payment Service (Development)
  payment-service:
    build:
      context: ./backend/payment-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend/payment-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DEBUG=true

  # Notification Service (Development)
  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend/notification-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DEBUG=true

  # Maintenance Service (Development)
  maintenance-service:
    build:
      context: ./backend/maintenance-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend/maintenance-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DEBUG=true

  # Booking Service (Development)
  booking-service:
    build:
      context: ./backend/booking-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend/booking-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DEBUG=true

  # AI Services (Development)
  ai-services:
    build:
      context: ./ai-services
      dockerfile: Dockerfile.dev
    volumes:
      - ./ai-services:/app
      - /app/__pycache__
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - PYTHONPATH=/app

  # Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development

  # Development Tools
  
  # pgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@propflow.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - propflow-network

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - propflow-network

  # Mailhog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - propflow-network

  # MinIO (S3 Compatible Storage for Development)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=propflow
      - MINIO_ROOT_PASSWORD=propflow123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - propflow-network

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - propflow-network

  # Zipkin (Alternative Tracing)
  zipkin:
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"
    networks:
      - propflow-network

volumes:
  pgadmin_data:
  minio_data:

networks:
  propflow-network:
    driver: bridge