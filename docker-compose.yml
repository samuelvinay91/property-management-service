version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - JWT_SECRET=your-jwt-secret-key
      - AUTH_SERVICE_URL=http://auth-service:4001/graphql
      - PROPERTY_SERVICE_URL=http://property-service:4002/graphql
      - TENANT_SERVICE_URL=http://tenant-service:4003/graphql
      - PAYMENT_SERVICE_URL=http://payment-service:4004/graphql
      - NOTIFICATION_SERVICE_URL=http://notification-service:4005/graphql
      - MAINTENANCE_SERVICE_URL=http://maintenance-service:4006/graphql
      - BOOKING_SERVICE_URL=http://booking-service:4007/graphql
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
    depends_on:
      - auth-service
      - property-service
      - tenant-service
      - payment-service
      - notification-service
      - maintenance-service
      - booking-service
    networks:
      - propflow-network

  # Auth Service
  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    ports:
      - "4001:4001"
    environment:
      - NODE_ENV=development
      - AUTH_SERVICE_PORT=4001
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/propflow_auth
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - JWT_EXPIRES_IN=7d
      - REFRESH_TOKEN_EXPIRES_IN=30d
      - EMAIL_SERVICE_URL=http://notification-service:4005
      - SMS_SERVICE_URL=http://notification-service:4005
    depends_on:
      - postgres
      - redis
    networks:
      - propflow-network

  # Property Service
  property-service:
    build:
      context: ./backend/property-service
      dockerfile: Dockerfile
    ports:
      - "4002:4002"
    environment:
      - NODE_ENV=development
      - PROPERTY_SERVICE_PORT=4002
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/propflow_properties
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - S3_BUCKET=propflow-properties
      - AWS_REGION=us-east-1
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - propflow-network

  # Tenant Service
  tenant-service:
    build:
      context: ./backend/tenant-service
      dockerfile: Dockerfile
    ports:
      - "4003:4003"
    environment:
      - NODE_ENV=development
      - TENANT_SERVICE_PORT=4003
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/propflow_tenants
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - propflow-network

  # Payment Service
  payment-service:
    build:
      context: ./backend/payment-service
      dockerfile: Dockerfile
    ports:
      - "4004:4004"
    environment:
      - NODE_ENV=development
      - PAYMENT_SERVICE_PORT=4004
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/propflow_payments
      - REDIS_URL=redis://redis:6379
      - STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
      - STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
      - PAYPAL_CLIENT_ID=your_paypal_client_id
      - PAYPAL_CLIENT_SECRET=your_paypal_client_secret
    depends_on:
      - postgres
      - redis
    networks:
      - propflow-network

  # Notification Service
  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    ports:
      - "4005:4005"
    environment:
      - NODE_ENV=development
      - NOTIFICATION_SERVICE_PORT=4005
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/propflow_notifications
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=your-email@gmail.com
      - SMTP_PASS=your-app-password
      - TWILIO_ACCOUNT_SID=your_twilio_account_sid
      - TWILIO_AUTH_TOKEN=your_twilio_auth_token
      - TWILIO_PHONE_NUMBER=+1234567890
      - FIREBASE_SERVER_KEY=your_firebase_server_key
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - propflow-network

  # Maintenance Service
  maintenance-service:
    build:
      context: ./backend/maintenance-service
      dockerfile: Dockerfile
    ports:
      - "4006:4006"
    environment:
      - NODE_ENV=development
      - MAINTENANCE_SERVICE_PORT=4006
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/propflow_maintenance
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - propflow-network

  # Booking Service
  booking-service:
    build:
      context: ./backend/booking-service
      dockerfile: Dockerfile
    ports:
      - "4007:4007"
    environment:
      - NODE_ENV=development
      - BOOKING_SERVICE_PORT=4007
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/propflow_bookings
      - REDIS_URL=redis://redis:6379
      - CALENDAR_SERVICE_URL=http://calendar-service:4008
    depends_on:
      - postgres
      - redis
    networks:
      - propflow-network

  # AI Services
  ai-services:
    build:
      context: ./ai-services
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - AI_SERVICE_PORT=8000
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/propflow_ai
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=your_openai_api_key
      - ANTHROPIC_API_KEY=your_anthropic_api_key
      - PINECONE_API_KEY=your_pinecone_api_key
      - PINECONE_ENVIRONMENT=your_pinecone_environment
      - LLM_PROVIDER=openai
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:4000
    depends_on:
      - postgres
      - redis
    volumes:
      - ./ai-services/models:/app/models
    networks:
      - propflow-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NEXT_PUBLIC_API_URL=http://localhost:4000/graphql
      - NEXT_PUBLIC_AI_API_URL=http://localhost:8000
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key
      - NEXT_PUBLIC_MAPBOX_TOKEN=your_mapbox_token
      - NEXT_PUBLIC_SOCKET_URL=http://localhost:4000
    depends_on:
      - api-gateway
      - ai-services
    networks:
      - propflow-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=propflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - propflow-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - propflow-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=propflow
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - propflow-network

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.9.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - propflow-network

  # MongoDB (for AI services and analytics)
  mongodb:
    image: mongo:7
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=propflow
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=propflow_ai
    volumes:
      - mongodb_data:/data/db
    networks:
      - propflow-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - propflow-network

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - propflow-network

  # Nginx (Load Balancer)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api-gateway
    networks:
      - propflow-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:
  mongodb_data:
  prometheus_data:
  grafana_data:

networks:
  propflow-network:
    driver: bridge